--- apscheduler/scheduler.py.orig	2012-04-02 10:26:54.000000000 +0200
+++ apscheduler/scheduler.py	2012-08-28 21:40:08.000460591 +0200
@@ -227,7 +227,7 @@
                     logger.exception('Error notifying listener')
 
     def _real_add_job(self, job, jobstore, wakeup):
-        job.compute_next_run_time(datetime.now())
+        job.compute_next_run_time(datetime.utcnow())
         if not job.next_run_time:
             raise ValueError('Not adding job since it would never be run')
 
@@ -460,7 +460,7 @@
         for run_time in run_times:
             # See if the job missed its run time window, and handle possible
             # misfires accordingly
-            difference = datetime.now() - run_time
+            difference = datetime.utcnow() - run_time
             grace_time = timedelta(seconds=job.misfire_grace_time)
             if difference > grace_time:
                 # Notify listeners about a missed run
@@ -479,7 +479,7 @@
                                    'reached (%d)', job, job.max_instances)
                     break
 
-                logger.info('Running job "%s" (scheduled at %s)', job,
+                logger.debug('Running job "%s" (scheduled at %s)', job,
                             run_time)
 
                 try:
@@ -550,7 +550,7 @@
         self._wakeup.clear()
         while not self._stopped:
             logger.debug('Looking for jobs to run')
-            now = datetime.now()
+            now = datetime.utcnow()
             next_wakeup_time = self._process_jobs(now)
 
             # Sleep until the next job is scheduled to be run,
